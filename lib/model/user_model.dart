///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class UserModel {
  String? userName;
  String? realName;
  String? nickName;
  int? gender;
  String? idCard;
  String? address;
  String? birthday;
  String? portrait;
  String? email;
  String? mobile;
  String? qq;
  String? wechat;
  int? loginCount;
  int? userStatus;
  int? isSystem;
  int? isOnline;
  String? firstVisit;
  String? lastVisit;
  String? remark;
  String? chatToken;
  int? supportId;
  bool? isIdentity;
  int? totalDeposits;
  int? depositsing;
  String? inviteCode;
  int? userLevel;
  String? departmentId;
  String? departmentName;
  String? positionIds;
  String? roleIds;
  int? baseVersion;
  String? baseModifyTime;
  String? baseCreateTime;
  String? id;
  String? token;

  UserModel({
    this.userName,
    this.realName,
    this.nickName,
    this.gender,
    this.idCard,
    this.address,
    this.birthday,
    this.portrait,
    this.email,
    this.mobile,
    this.qq,
    this.wechat,
    this.loginCount,
    this.userStatus,
    this.isSystem,
    this.isOnline,
    this.firstVisit,
    this.lastVisit,
    this.remark,
    this.chatToken,
    this.supportId,
    this.isIdentity,
    this.totalDeposits,
    this.depositsing,
    this.inviteCode,
    this.userLevel,
    this.departmentId,
    this.departmentName,
    this.positionIds,
    this.roleIds,
    this.baseVersion,
    this.baseModifyTime,
    this.baseCreateTime,
    this.id,
    this.token,
  });
  UserModel.fromJson(Map<String, dynamic> json, [String? mToken]) {
    if (mToken != null)
      token = mToken;
    else
      token = json["token"]?.toString();
    userName = json["userName"]?.toString();
    realName = json["realName"]?.toString();
    nickName = json["nickName"]?.toString();
    gender = json["gender"]?.toInt();
    idCard = json["idCard"]?.toString();
    address = json["address"]?.toString();
    birthday = json["birthday"]?.toString();
    portrait = json["portrait"]?.toString();
    email = json["email"]?.toString();
    mobile = json["mobile"]?.toString();
    qq = json["qq"]?.toString();
    wechat = json["wechat"]?.toString();
    loginCount = json["loginCount"]?.toInt();
    userStatus = json["userStatus"]?.toInt();
    isSystem = json["isSystem"]?.toInt();
    isOnline = json["isOnline"]?.toInt();
    firstVisit = json["firstVisit"]?.toString();
    lastVisit = json["lastVisit"]?.toString();
    remark = json["remark"]?.toString();
    chatToken = json["chatToken"]?.toString();
    supportId = json["supportId"]?.toInt();
    isIdentity = json["isIdentity"];
    totalDeposits = json["totalDeposits"]?.toInt();
    depositsing = json["depositsing"]?.toInt();
    inviteCode = json["inviteCode"]?.toString();
    userLevel = json["userLevel"]?.toInt();
    departmentId = json["departmentId"]?.toString();
    departmentName = json["departmentName"]?.toString();
    positionIds = json["positionIds"]?.toString();
    roleIds = json["roleIds"]?.toString();
    baseVersion = json["baseVersion"]?.toInt();
    baseModifyTime = json["baseModifyTime"]?.toString();
    baseCreateTime = json["baseCreateTime"]?.toString();
    id = json["id"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["userName"] = userName;
    data["realName"] = realName;
    data["nickName"] = nickName;
    data["gender"] = gender;
    data["idCard"] = idCard;
    data["address"] = address;
    data["birthday"] = birthday;
    data["portrait"] = portrait;
    data["email"] = email;
    data["mobile"] = mobile;
    data["qq"] = qq;
    data["wechat"] = wechat;
    data["loginCount"] = loginCount;
    data["userStatus"] = userStatus;
    data["isSystem"] = isSystem;
    data["isOnline"] = isOnline;
    data["firstVisit"] = firstVisit;
    data["lastVisit"] = lastVisit;
    data["remark"] = remark;
    data["chatToken"] = chatToken;
    data["supportId"] = supportId;
    data["isIdentity"] = isIdentity;
    data["totalDeposits"] = totalDeposits;
    data["depositsing"] = depositsing;
    data["inviteCode"] = inviteCode;
    data["userLevel"] = userLevel;
    data["departmentId"] = departmentId;
    data["departmentName"] = departmentName;
    data["positionIds"] = positionIds;
    data["roleIds"] = roleIds;
    data["baseVersion"] = baseVersion;
    data["baseModifyTime"] = baseModifyTime;
    data["baseCreateTime"] = baseCreateTime;
    data["id"] = id;
    data["token"] = token;
    return data;
  }

  static UserModel generateMockUserData() {
    return UserModel(
      userName: "mock_user_001",
      realName: "模拟用户",
      nickName: "MockUser",
      gender: 1, // 0: 未知, 1: 男, 2: 女
      idCard: "110101199003071234",
      address: "广东省深圳市南山区虚拟街道123号",
      birthday: "1990-03-07",
      portrait: "https://via.placeholder.com/400x400/4A9DF6/FFFFFF?text=Mock+User",
      email: "mockuser@example.com",
      mobile: "13800138000",
      qq: "123456789",
      wechat: "mock_wechat_id",
      loginCount: 8,
      userStatus: 1, // 1: 正常, 2: 禁用
      isSystem: 2, // 1: 是, 2: 否
      isOnline: 1, // 1: 在线, 2: 离线
      firstVisit: DateTime.now().subtract(Duration(days: 90)).toIso8601String(),
      lastVisit: DateTime.now().subtract(Duration(minutes: 30)).toIso8601String(),
      remark: "这是模拟用户数据，用于网络请求失败时的展示",
      chatToken: "MOCK_CHAT_TOKEN_1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ",
      supportId: 987654321,
      isIdentity: true, // 是否已实名认证
      totalDeposits: 5000, // 总佣金(分)
      depositsing: 2000, // 待结算佣金(分)
      inviteCode: "MOCK123",
      userLevel: 3, // 用户等级
      departmentId: "DEPT_001",
      departmentName: "模拟部门",
      positionIds: "POS_001",
      roleIds: "ROLE_USER",
      baseVersion: 1,
      baseModifyTime: DateTime.now().subtract(Duration(hours: 2)).toIso8601String(),
      baseCreateTime: DateTime.now().subtract(Duration(days: 100)).toIso8601String(),
      id: "mock_user_id_9876543210",
      token: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoibW9ja191c2VyX2lkXzk4NzY1NDMyMTAiLCJleHAiOjk5OTk5OTk5OTl9.mock_signature_for_testing",
    );
  }
}
